(defun fix-blog-title ()
  (interactive)
  (beginning-of-buffer)
  (re-search-forward "title")
  (beginning-of-line)
  (insert "#+")
  (replace-string-in-region "\'" "" (line-beginning-position) (line-end-position))
  )


(defun fix-blog-date ()
  (interactive)
  (beginning-of-buffer)
  (re-search-forward "date")
  (replace-string-in-region "'" "" (line-beginning-position) (line-end-position))
  (beginning-of-line)
  (insert "#+")
  (re-search-forward ": ")
  (kill-visual-line)
  (insert (format-time-string "<%Y-%m-%d>" (date-to-time (current-kill 0 t))))
  )

(defun delete-draft-line ()
  (interactive)
  (beginning-of-buffer)
  (while (re-search-forward "draft:" nil t)
  (beginning-of-line)
  (kill-visual-line)
  (kill-visual-line))
  )

(defun fix-blog-tags ()
  (interactive)
  (beginning-of-buffer)
  (while (re-search-forward "^tags:" nil t)
  (beginning-of-line)
  (insert "#+file")
  (replace-string-in-region "\'" "" (line-beginning-position) (line-end-position))
  (replace-string-in-region "," "" (line-beginning-position) (line-end-position))
  (replace-string-in-region "[" "" (line-beginning-position) (line-end-position))
  (replace-string-in-region "]" "" (line-beginning-position) (line-end-position))
    (replace-string-in-region "- " "" (line-beginning-position) (line-end-position))
  (downcase-region (line-beginning-position) (line-end-position))
  ))

(defun delete-markdown-header-lines ()
  (interactive)
  (beginning-of-buffer)
  (while (re-search-forward "^---$" nil t)
    (replace-match "")
    (kill-visual-line)))

(defun delete-url-line ()
  (interactive)
  (beginning-of-buffer)
  (while (re-search-forward "^url:" nil t 1)
    (replace-match "")
    (kill-visual-line)))

(defun delete-comments-line ()
  (interactive)
  (beginning-of-buffer)
  (while (re-search-forward "^comments:" nil t 1)
    (replace-match "")
    (kill-visual-line)))


(defun convert-markdown-eol ()
  (interactive)
  (beginning-of-line)
  (while (re-search-forward "[[:blank:]]+$" nil t)
	(replace-match "\\\\\\\\")))

(defun italicize-amen ()
(interactive)
(while (re-search-forward "^\*Amen\\*" nil t)
    (replace-match "/Amen/")
    ))

(defun convert-md-links ()
(interactive)
(beginning-of-buffer)
;; (while
;; (re-search-forward "\\(\\[.*\\]\\)(\\(.*\\))" nil t)
;; (replace-match "[[\\2]\\1]")
;; )
(query-replace-regexp "\\(\\[.*\\]\\)(\\(.*\\))" 
 "[[\\2]\\1]"))


(defun convert-md-footnotes ()
  (interactive)
  (beginning-of-buffer)
  (while
      (re-search-forward "\\[\\^")
    (replace-match "[fn:"))
    )

(defun convert-markdown-header ()
  (interactive)
  (progn
    (delete-markdown-header-lines)
    (fix-blog-title)
    (fix-blog-date)
    (delete-draft-line)
    (fix-blog-tags)
    (delete-url-line)
    (delete-comments-line)
    ;; (convert-markdown-eol)
    ;; (italicize-amen)
    ))

(defun fix-prayers ()
  (interactive)
  (progn
    (convert-markdown-eol)
    (italicize-amen)))
