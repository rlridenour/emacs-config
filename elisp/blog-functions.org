Some functions for converting old posts.

#+begin_src emacs-lisp
  (defun fix-blog-title ()
    (interactive)
    (beginning-of-buffer)
    (re-search-forward "title")
    (beginning-of-line)
    (insert "#+")
    (replace-string-in-region "\'" "" (line-beginning-position) (line-end-position))
    )


  (defun fix-blog-date ()
    (interactive)
    (beginning-of-buffer)
    (re-search-forward "date")
    (replace-string-in-region "'" "" (line-beginning-position) (line-end-position))
    (beginning-of-line)
    (insert "#+")
    (re-search-forward ": ")
    (kill-visual-line)
    (insert (format-time-string "" (date-to-time (current-kill 0 t))))
    )

  (defun delete-draft-line ()
    (interactive)
    (beginning-of-buffer)
    (while (re-search-forward "draft:" nil t)
      (beginning-of-line)
      (kill-visual-line)
      (kill-visual-line))
    )

  (defun fix-blog-tags ()
    (interactive)
    (beginning-of-buffer)
    (while (re-search-forward "^tags:" nil t)
      (beginning-of-line)
      (insert "#+file")
      (replace-string-in-region "\'" "" (line-beginning-position) (line-end-position))
      (replace-string-in-region "," "" (line-beginning-position) (line-end-position))
      (replace-string-in-region "[" "" (line-beginning-position) (line-end-position))
      (replace-string-in-region "]" "" (line-beginning-position) (line-end-position))
      (replace-string-in-region "- " "" (line-beginning-position) (line-end-position))
      (downcase-region (line-beginning-position) (line-end-position))
      ))

  (defun delete-unnecessary-header-lines ()
    (interactive)
    (beginning-of-buffer)
    (while (re-search-forward "^---$" nil t)
      (replace-match "")
      (kill-visual-line))
    (beginning-of-buffer)
    (while (re-search-forward "^url:.*$" nil t 1)
      (replace-match "")
      (kill-visual-line))
    (beginning-of-buffer)
    (while (re-search-forward "^comments:.*$" nil t 1)
      (replace-match "")
      (kill-visual-line))
    (beginning-of-buffer)
    (while (re-search-forward "^highlight:.*$" nil t 1)
      (replace-match "")
      (kill-visual-line))
    (beginning-of-buffer)
    (while (re-search-forward "^markup:.*$" nil t 1)
      (replace-match "")
      (kill-visual-line))
    (beginning-of-buffer)
    (while (re-search-forward "^math:.*$" nil t 1)
      (replace-match "")
      (kill-visual-line))
    (beginning-of-buffer)
    (while (re-search-forward "^draft:.*$" nil t 1)
      (replace-match "")
      (kill-visual-line))
    (beginning-of-buffer)
    (while (re-search-forward "^categories:.*$" nil t 1)
      (replace-match "")
      (kill-visual-line))
    )

  (defun convert-markdown-eol ()
    (interactive)
    (beginning-of-line)
    (while (re-search-forward "[[:blank:]]+$" nil t)
      (replace-match "\\\\\\\\")))

  (defun italicize-amen ()
    (interactive)
    (while (re-search-forward "^\*Amen\\*" nil t)
      (replace-match "/Amen/")
      ))

  (defun convert-md-links ()
    (interactive)
    (beginning-of-buffer)
    ;; (while
    ;; (re-search-forward "\\(\\[.*\\]\\)(\\(.*\\))" nil t)
    ;; (replace-match "[[\\2]\\1]")
    ;; )
    (query-replace-regexp "\\(\\[.*\\]\\)(\\(.*\\))"
			"[[\\2]\\1]"))


  (defun convert-md-footnotes ()
    (interactive)
    (beginning-of-buffer)
    (while
	(re-search-forward "\\[\\^")
      (replace-match "[fn:"))
    )

  (defun convert-markdown-header ()
    (interactive)
    (progn
      (delete-unnecessary-header-lines)
      (fix-blog-title)
      (fix-blog-date)
      (fix-blog-tags)
      ))

  (defun fix-prayers ()
    (interactive)
    (progn
      (convert-markdown-eol)
      (italicize-amen)))

  (defun fix-post ()
    (interactive)
    (progn
      (convert-markdown-header)
      (fix-prayers)))


  (defun convert-html-quote ()
    (interactive)
    (beginning-of-buffer)
    (while (re-search-forward "" nil t)
      (replace-match "
  #\+end_quote"))
    (beginning-of-buffer)
    (while (re-search-forward "" nil t)
      (replace-match "#\+begin+quote
  "))
    (beginning-of-buffer)
    (while (re-search-forward "" nil t)
      (replace-match ""))
    (beginning-of-buffer)
    (while (re-search-forward "" nil t)
      (replace-match "--- ")))



  (defun convert-html-headings ()
    (interactive)
    (beginning-of-buffer)
    (while (re-search-forward "" nil t)
      (replace-match "
"))
    (beginning-of-buffer)
    (while (re-search-forward "" nil t)
      (replace-match "
\*\*  "))
    (beginning-of-buffer)
    (while (re-search-forward "" nil t)
      (replace-match "
"))
    (beginning-of-buffer)
    (while (re-search-forward "" nil t)
      (replace-match "
\*\*  ")))

(defun convert-html-links ()
(interactive)
(beginning-of-buffer)
(while 
(re-search-forward "" nil t)
(replace-match "[[\\1]["))
(beginning-of-buffer)
(while 
(re-search-forward "" nil t)
(replace-match "]]")))

(defun convert-html-list ()
(interactive)
(beginning-of-buffer)
(while 
(re-search-forward "" nil t)
(replace-match "- ")))


(defun strip-html ()
  "Remove HTML tags from the current buffer, 
   (this will affect the whole buffer regardless of the restrictions in effect)."
  (interactive "*")
  (save-excursion
    (save-restriction
      (widen)
      (goto-char (point-min))
      (while (re-search-forward "<[^" (point-max) t)
    (replace-match "\\1"))
      (goto-char (point-min))
      (replace-string "(c)" "(c)")
      (goto-char (point-min))
      (replace-string "&" "&")
      (goto-char (point-min))
      (replace-string "<" "")
      (goto-char (point-min)))))



(defun convert-html-post ()
(interactive)
(beginning-of-buffer)
(while
(re-search-forward "" nil t)
(replace-match "
"))
(beginning-of-buffer)
(while
(re-search-forward "&hellip;" nil t)
(replace-match "..."))
(convert-html-headings)
(convert-html-quote)
(convert-html-links)
(convert-html-list)
(strip-html)
)

#+end_src
